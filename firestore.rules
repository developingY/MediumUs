rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      // Anyone can read any user's profile.
      allow read;
      // Only the author can their own profile
      allow write: if request.auth.uid == userId;
      // Any logged in user can create their own profile.
      allow create: if request.auth.uid != null;
    }

    match /articles/{articleId} {
      allow read: if 
        // Allow reading nonexist docs, let the code handle this case.
        !exists(/databases/$(database)/documents/articles/$(articleId))
        // Anyone can read published articles. 
        || resource.data.state == 1 
        // Only the author can read non-published articles.
        || request.auth.uid == resource.data.author;
      // Only the author can modify articles.
      allow write: if request.auth.uid == resource.data.author;
      // Any logged in user can create articles.
      allow create: if request.auth.uid != null;
      // idempotent deletion
      allow delete: if !exists(/databases/$(database)/documents/articles/$(articleId));
    }

    match /clapping/{articleId}/userClapping/{userId} {
      // Anyone can read clapping data.
      allow read;
      // A user can only modify their own clapping data
      allow write: if request.auth.uid == userId;
      // Any logged in user can clap.
      allow create: if request.auth.uid != null;
    }

    match /topics/{documents=**} {
      // topic-tag relationships are publicly visible
      allow read;
      allow write: if isAdmin(request.auth.uid);
    }

    function isAdmin(uid) {
      // TODO: hard code admin uid
      return true;
    }
  }
}
